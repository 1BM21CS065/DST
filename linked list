#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};
struct node *head;

void beginsert()
{
    struct node *ptr;
    int item;
    ptr=(struct node*)malloc(sizeof(struct node));
    if(ptr==NULL)
        printf("Overflow\n");
    else
    {
     printf("Enter value \n");
     scanf("%d",&item);
     ptr->data=item;
     ptr->next=head;
     head=ptr;
     printf("Node inserted \n");
    }
}
void endinsert()
{
    struct node *ptr, *temp;
    int item;
    ptr=(struct node *)malloc(sizeof(struct node));
    if(ptr==NULL)
    printf("Overflow \n");
    else
    {
     printf("Enter value \n");
     scanf("%d",&item);
     ptr->data=item;
        if(head==NULL)
        {
            head=ptr;
            ptr->next=NULL;
        }
        else
        {
            temp=head;
            while(temp->next!=NULL)
            temp=temp->next;
            temp->next=ptr;
            ptr->next=NULL;
        }
    }
}


void insertpos()
{
    int i,n,item;
    struct node *ptr,*temp;
    ptr=(struct node *)malloc(sizeof(struct node));
    if(ptr==NULL)
    printf("Overflow \n");
    else
    {
        printf("Enter value \n");
        scanf("%d",&item);
        ptr->data=item;
        printf("Enter location at which you want to enter ");
        scanf("%d",&n);
        temp=head;
        for(i=2;i<n;i++)
        {
            temp=temp->next;
            if(temp==NULL)
            {
                printf("\nCan't insert \n");
                return;
            }
        }
        ptr->next=temp->next;
        temp->next=ptr;
        printf("\nNode inserted \n");
    }
}
void display()
{
    struct node *ptr;
    ptr=head;
    if(ptr==NULL)
        printf("Nothing to print");
    else
    {
        printf("Printing values\n");
        while(ptr!=NULL)
        {
            printf("\n %d", ptr->data);
            ptr=ptr->next;
        }
    }

}

void begdelete()
{
    struct node *ptr;
    if(head==NULL)
    printf("List is empty \n");
    else
    {
        ptr=head;
        head=ptr->next;
        free(ptr);
        printf("Node deleted at beginning \n");
    }
}

void deletepos()
{
    struct node *ptr,*temp;
    int n,i;
    printf("Enter position \n");
    scanf("%d",&n);
    ptr=head;
    for(i=1;i<n;i++)
    {
        temp=ptr;
        ptr=ptr->next;
        if(ptr==NULL)
        {
            printf("Cant delete \n");
            return;
        }
    }
        temp->next=ptr->next;
        free(ptr);
        printf("Node deleted at %d position ",n+1);
}

void lastdelete()
{
    struct node *ptr,*temp;
    if(head==NULL)
    printf("List is empty \n");
    else if(head->next==NULL)
    {
        free(head);
        printf("Only one node of the list is deleted \n");
    }
    else
    {
        ptr=head;
        ptr = head;
        while(ptr->next != NULL)
        {
            temp = ptr;
            ptr = ptr ->next;
        }
        temp->next=NULL;
        free(ptr);
        printf("Last node of Linked list got deleted \n");
    }
}
int search()
{
    struct node *ptr;
    int d,i=1,flag=0;
    ptr=head;
    if(head==NULL)
    {
        printf("Empty \n");
    }
    else
    {
        printf("Enter the data you want to delete \n");
        scanf("%d",&d);
        while(ptr!=NULL)
        {
            if(ptr->data==d)
            {
                return (i);
            }
            i++;
            ptr=ptr->next;
        }
        flag=1;
        if(flag==1)
        return (NULL);
    }
}
void deleteele()
{
    int i,data;
    struct node *ptr,*temp;
    data=search();
    if(data==NULL)
    {
       printf("Element not found");
        return;
    }
       ptr=head;
     for(i=1;i<data;i++)
    {
        temp=ptr;
        ptr=ptr->next;
        if(ptr==NULL)
        {
            printf("Cant delete \n");
            return;
        }
    }
        temp->next=ptr->next;
        free(ptr);
        printf("Node deleted ");
}
void main()
{
    int ch;
    while(ch !=9)
    {
        printf("\n \n1.Insert \n2.End insert \n3.Insert at position \n4.Delete at beginning \n5.Delete at position \n6.Delete at end \n7.Delete element \n8.Display \n9.Exit \n\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
                {
                beginsert();
                break;
                }
            case 2:
                {
                    endinsert();
                        break;
                }
            case 3:
                {
                    insertpos();
                    break;
                }
            case 4:
                {
                    begdelete();
                    break;
                }
            case 5:
                {
                    deletepos();
                    break;
                }
            case 6:
                {
                    lastdelete();
                    break;
                }
            case 7:
                {
                    deleteele();
                    break;
                }
            case 8:
                {
                    display();
                    break;
                }

            case 9:
                exit(0);
        }
    }
}


